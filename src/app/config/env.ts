import dotenv from "dotenv";
dotenv.config(); // üîπ .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá environment variables ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶õ‡ßá

interface EnvConfig {
    PORT: string,
    DB_URL: string,
    NODE_ENV: "development" | "production",
    BCRYPT_SALT_ROUND : string,
    JWT_ACCESS_EXPIRES: string,
    JWT_ACCESS_SECRET: string,
}

// üî∞ ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü environment variables ‡¶ó‡ßÅ‡¶≤‡ßã validate ‡¶ï‡¶∞‡ßá,
//    ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá error ‡¶¶‡ßá‡ßü, ‡¶Ü‡¶∞ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ü‡¶æ‡¶á‡¶™‡¶∏‡¶π return ‡¶ï‡¶∞‡ßá
const loadEnvVariables = (): EnvConfig => {
    const requiredEnvVariables: string[] = ["PORT", "DB_URL", "NODE_ENV", "BCRYPT_SALT_ROUND", "JWT_ACCESS_EXPIRES", "JWT_ACCESS_SECRET"]; // üîπ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü

    requiredEnvVariables.forEach(key => {
        if (!process.env[key]) {
            throw new Error(`Missing required environment variable: ${key}`); // üî∏ ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá error
        }
    });

    return {
        PORT: process.env.PORT as string,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        DB_URL: process.env.DB_URL!, // üî∏ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶õ‡ßá ‡¶¨‡¶≤‡ßá‡¶á non-null assertion (!)
        NODE_ENV: process.env.NODE_ENV as "development" | "production",
        BCRYPT_SALT_ROUND : process.env.BCRYPT_SALT_ROUND as string,
        JWT_ACCESS_EXPIRES: process.env.JWT_ACCESS_EXPIRES as string,
        JWT_ACCESS_SECRET: process.env.JWT_ACCESS_SECRET as string,
    };
};

export const envVars = loadEnvVariables(); // üîπ validated env config export ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
